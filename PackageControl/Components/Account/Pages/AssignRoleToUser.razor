@page "/assign-role-to-user"
@attribute [Authorize(Roles = "Admin")]

@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using Entities
@using System.ComponentModel.DataAnnotations
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager

<PageTitle>Assign Role to User</PageTitle>

<h3>Assign Role to a User</h3>

<div class="row">
    <div class="col-md-6">
        <!-- Add FormName attribute to the EditForm to uniquely identify it -->
        <EditForm Model="Input" OnValidSubmit="AssignRole" FormName="assignRoleForm">
            <DataAnnotationsValidator />
            <h2>Assign a Role</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.UserEmail" class="form-control" placeholder="Email" />
                <label for="user-email">User Email</label>
                <ValidationMessage For="() => Input.UserEmail" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputSelect @bind-Value="Input.SelectedRole" class="form-select">
                    <option value="">Select a role</option>
                    @foreach (var role in roles)
                    {
                        <option value="@role">@role</option>
                    }
                </InputSelect>
                <label for="role">Role</label>
                <ValidationMessage For="() => Input.SelectedRole" class="text-danger" />
            </div>

            <button type="submit" class="w-100 btn btn-lg btn-primary">Assign Role</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(message))
        {
            <p>@message</p>
        }
    </div>
</div>

@code {
    private IEnumerable<string> roles = Enumerable.Empty<string>();
    private string? message;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        roles = await RoleManager.Roles.Select(r => r.Name).ToListAsync();
    }

    private async Task AssignRole()
    {
        var user = await UserManager.FindByEmailAsync(Input.UserEmail);
        if (user != null && !string.IsNullOrEmpty(Input.SelectedRole))
        {
            // Obtener todos los roles actuales del usuario
            var currentRoles = await UserManager.GetRolesAsync(user);

            // Remover todos los roles actuales
            var removeResult = await UserManager.RemoveFromRolesAsync(user, currentRoles);
            if (!removeResult.Succeeded)
            {
                message = $"Error removing roles: {string.Join(", ", removeResult.Errors.Select(e => e.Description))}";
                return;
            }

            // Asignar el nuevo rol
            var addResult = await UserManager.AddToRoleAsync(user, Input.SelectedRole);
            if (addResult.Succeeded)
            {
                message = "Role assigned successfully.";
            }
            else
            {
                message = $"Error assigning role: {string.Join(", ", addResult.Errors.Select(e => e.Description))}";
            }
        }
        else
        {
            message = "Invalid user or role.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string UserEmail { get; set; } = string.Empty;

        [Required]
        public string SelectedRole { get; set; } = string.Empty;
    }
}