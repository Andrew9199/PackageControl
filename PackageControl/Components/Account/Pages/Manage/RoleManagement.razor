@page "/role-management"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using PackageControl.Data
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager

<h3>Gestión de Roles</h3>

<div>
    <h4>Agregar Nuevo Rol</h4>
    <input @bind="newRoleName" placeholder="Nombre del rol" />
    <button @onclick="AddRole">Agregar Rol</button>
    @if (!string.IsNullOrEmpty(addRoleMessage))
    {
        <p>@addRoleMessage</p>
    }
</div>

<div>
    <h4>Roles Existentes</h4>
    <ul>
        @foreach (var role in roles)
        {
            <li>
                @role.Name
                <button @onclick="() => DeleteRole(role.Id)">Eliminar</button>
            </li>
        }
    </ul>
</div>

@code {
    private string newRoleName;
    private string addRoleMessage;
    private List<IdentityRole> roles = new();

    protected override async Task OnInitializedAsync()
    {
        roles = await RoleManager.Roles.ToListAsync();
    }

    private async Task AddRole()
    {
        Console.WriteLine("Entrando a AddRole");  // Depuración
        if (!string.IsNullOrWhiteSpace(newRoleName))
        {
            Console.WriteLine("El nombre del nuevo rol no está vacío: " + newRoleName);  // Depuración
            var role = new IdentityRole(newRoleName);
            var result = await RoleManager.CreateAsync(role);

            if (result.Succeeded)
            {
                addRoleMessage = "Rol agregado exitosamente.";
                newRoleName = string.Empty;
                roles.Add(role);
                Console.WriteLine("Rol creado exitosamente: " + newRoleName);  // Depuración
            }
            else
            {
                addRoleMessage = "Error al agregar el rol: " + string.Join(", ", result.Errors.Select(e => e.Description));
                Console.WriteLine("Error al agregar el rol: " + string.Join(", ", result.Errors.Select(e => e.Description)));  // Depuración
            }
        }
        else
        {
            Console.WriteLine("El nombre del rol está vacío");  // Depuración
        }
    }

    private async Task DeleteRole(string roleId)
    {
        var role = await RoleManager.FindByIdAsync(roleId);
        if (role != null)
        {
            var result = await RoleManager.DeleteAsync(role);
            if (result.Succeeded)
            {
                roles.Remove(role);
            }
        }
    }
}
