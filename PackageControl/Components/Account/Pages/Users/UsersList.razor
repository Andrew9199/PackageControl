@page "/users"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Entities
@using System.ComponentModel.DataAnnotations
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@attribute [Authorize(Roles = "Admin")]

<PageTitle>Users List</PageTitle>

<div class="container-fluid mt-4">
    <h3 class="mb-4">Users List</h3>

    <!-- Formulario para la búsqueda -->
    <EditForm Model="SearchModel" OnValidSubmit="OnSearch" FormName="userSearchForm">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" />
        <div class="mb-3">
            <InputText @bind-Value="SearchModel.SearchTerm" class="form-control" placeholder="Search by name..." />
            <ValidationMessage For="() => SearchModel.SearchTerm" />
        </div>
        <button type="submit" class="btn btn-primary">Search</button>
    </EditForm>

    @if (users == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (!users.Any())
    {
        <div class="alert alert-warning" role="alert">
            No users found.
        </div>
    }
    else
    {
        <div class="table-responsive">
            <!-- Tabla personalizada con colores azul y morado -->
            <table class="table table-hover table-bordered custom-table">
                <thead class="custom-table-header">
                    <tr>
                        <th>Username</th>
                        <th>Phone Number</th>
                        <th>Name</th>
                        <th>Last Name</th>
                        <th>Identification Type</th>
                        <th>Identification Number</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in filteredUsers)
                    {
                        <tr>
                            <td>@user.UserName</td>
                            <td>@user.PhoneNumber</td>
                            <td>@user.FirstName</td>
                            <td>@user.LastName</td>
                            <td>@user.IdentificationType</td>
                            <td>@user.IdentificationNumber</td>
                            <td>
                                <!-- Botón para ver los paquetes del usuario -->
                                <button class="btn btn-info" @onclick="() => GoToUserPackages(user.Id)">View Packages</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<!-- Estilos personalizados para la tabla y formulario -->
<style>
    .custom-table {
        background-color: #f0f4ff; /* Fondo azul claro */
        border-color: #6c5ce7; /* Bordes morados */
    }

    .custom-table-header {
        background-color: #6c5ce7; /* Morado oscuro para el encabezado */
        color: white; /* Texto blanco para el encabezado */
    }

    .custom-table tr:hover {
        background-color: #a29bfe; /* Fondo morado claro al hacer hover */
    }

    .custom-table td, .custom-table th {
        border-color: #6c5ce7; /* Bordes morados */
    }

    .btn-info {
        background-color: #6c5ce7; /* Botón con fondo morado */
        border-color: #6c5ce7; /* Borde morado para el botón */
    }

        .btn-info:hover {
            background-color: #5a4db6; /* Fondo morado más oscuro al hacer hover */
            border-color: #5a4db6; /* Borde morado más oscuro al hacer hover */
        }

    .form-control {
        border-color: #6c5ce7; /* Bordes morados para el campo de búsqueda */
    }

        .form-control:focus {
            border-color: #4a3a6b; /* Morado más oscuro al enfocar */
            box-shadow: 0 0 0 .2rem rgba(108, 92, 231, .25); /* Sombra morada al enfocar */
        }

    .alert-warning {
        background-color: #f0f4ff; /* Fondo azul claro para alertas */
        border-color: #6c5ce7; /* Bordes morados para alertas */
    }
</style>

@code {
    private List<ApplicationUser>? users;
    private List<ApplicationUser> filteredUsers = new();

    [SupplyParameterFromForm]
    private UserSearchModel SearchModel { get; set; } = new UserSearchModel();

    // Cargar la lista de usuarios al inicializar
    protected override async Task OnInitializedAsync()
    {
        users = await UserManager.Users.ToListAsync();
        filteredUsers = users;
    }

    // Método para realizar la búsqueda
    private void OnSearch()
    {
        if (!string.IsNullOrWhiteSpace(SearchModel.SearchTerm))
        {
            filteredUsers = users
                ?.Where(u => u.FirstName.Contains(SearchModel.SearchTerm, StringComparison.OrdinalIgnoreCase) ||
                             u.LastName.Contains(SearchModel.SearchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList() ?? new List<ApplicationUser>();
        }
        else
        {
            filteredUsers = users ?? new List<ApplicationUser>();
        }

        StateHasChanged();
    }

    // Método para redirigir a la página de paquetes de un usuario
    private void GoToUserPackages(string userId)
    {
        NavigationManager.NavigateTo($"/user-packages/{userId}");
    }

    // Modelo para el formulario de búsqueda
    private sealed class UserSearchModel
    {
        public string SearchTerm { get; set; } = string.Empty;
    }
}
