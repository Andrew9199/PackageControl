@page "/users"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Entities
@using System.ComponentModel.DataAnnotations
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@attribute [Authorize(Roles = "Admin")]

<PageTitle>Users List</PageTitle>

<h3>Users List</h3>

<!-- Formulario para la búsqueda -->
<EditForm Model="SearchModel" OnValidSubmit="OnSearch" FormName="userSearchForm">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" />
    <div class="mb-3">
        <InputText @bind-Value="SearchModel.SearchTerm" class="form-control" placeholder="Search by name..." />
        <ValidationMessage For="() => SearchModel.SearchTerm" />
    </div>
    <button type="submit" class="btn btn-primary">Search</button>
</EditForm>

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else if (!users.Any())
{
    <p>No users found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Username</th>
                <th>Phone Number</th>
                <th>Name</th>
                <th>Last Name</th>
                <th>Identification Type</th>
                <th>Identification Number</th>
                <th>Actions</th> <!-- Nueva columna para las acciones -->
            </tr>
        </thead>
        <tbody>
            @foreach (var user in filteredUsers)
            {
                <tr>
                    <td>@user.UserName</td>
                    <td>@user.PhoneNumber</td>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>@user.IdentificationType</td>
                    <td>@user.IdentificationNumber</td>
                    <td>
                        <!-- Botón para ver los paquetes del usuario -->
                        <button class="btn btn-info" @onclick="() => GoToUserPackages(user.Id)">Paquetes</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ApplicationUser>? users;
    private List<ApplicationUser> filteredUsers = new();

    [SupplyParameterFromForm]
    private UserSearchModel SearchModel { get; set; } = new UserSearchModel();

    // Cargar la lista de usuarios al inicializar
    protected override async Task OnInitializedAsync()
    {
        users = await UserManager.Users.ToListAsync();
        filteredUsers = users;
    }

    // Método para realizar la búsqueda
    private void OnSearch()
    {
        if (!string.IsNullOrWhiteSpace(SearchModel.SearchTerm))
        {
            filteredUsers = users
                ?.Where(u => u.FirstName.Contains(SearchModel.SearchTerm, StringComparison.OrdinalIgnoreCase) ||
                             u.LastName.Contains(SearchModel.SearchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList() ?? new List<ApplicationUser>();
        }
        else
        {
            filteredUsers = users ?? new List<ApplicationUser>();
        }

        StateHasChanged();
    }

    // Método para redirigir a la página de paquetes de un usuario
    private void GoToUserPackages(string userId)
    {
        // Redirigir a la página de paquetes del usuario con su userId como parámetro
        NavigationManager.NavigateTo($"/user-packages/{userId}");
    }

    // Modelo para el formulario de búsqueda
    private sealed class UserSearchModel
    {
        public string SearchTerm { get; set; } = string.Empty;
    }
}
