@page "/Roles/management"
@attribute [Authorize(Roles = "Admin")]

@rendermode InteractiveServer

@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using Entities
@using System.ComponentModel.DataAnnotations
@using PackageControl.Components.Account.Shared
@inject RoleManager<IdentityRole> RoleManager
@inject ILogger<RoleManagement> Logger

<PageTitle>Role Management</PageTitle>

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" OnValidSubmit="AddRole" FormName="roleForm">
            <DataAnnotationsValidator />
            <h2 class="mb-3">Add a new role</h2>
            <hr />
            <ValidationSummary class="alert alert-danger" role="alert" />

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.RoleName" class="form-control" placeholder="Role Name" id="role-name" />
                <label for="role-name">Role Name</label>
                <ValidationMessage For="() => Input.RoleName" class="text-danger" />
            </div>

            <button type="submit" class="w-100 btn btn-lg btn-primary">Add Role</button>
        </EditForm>
    </div>

    <div class="col-md-6 offset-md-2">
        <h2 class="mb-3">Existing Roles</h2>
        <hr />
        <ul class="list-group">
            @foreach (var role in roles)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    @role.Name
                    <button @onclick="() => DeleteRole(role.Id)" class="btn btn-danger btn-sm">
                        <i class="bi bi-trash"></i> Delete
                    </button>
                </li>
            }
        </ul>
    </div>
</div>

@code {
    private IEnumerable<IdentityRole> roles = Enumerable.Empty<IdentityRole>();
    private string? Message { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        roles = await RoleManager.Roles.ToListAsync();
    }

    private async Task AddRole()
    {
        var role = new IdentityRole(Input.RoleName);
        var result = await RoleManager.CreateAsync(role);

        if (result.Succeeded)
        {
            Message = "Role added successfully.";
            roles = await RoleManager.Roles.ToListAsync(); // Refresh roles list
        }
        else
        {
            Message = $"Error adding role: {string.Join(", ", result.Errors.Select(e => e.Description))}";
        }
    }

    private async Task DeleteRole(string roleId)
    {
        var role = await RoleManager.FindByIdAsync(roleId);
        if (role != null)
        {
            var result = await RoleManager.DeleteAsync(role);
            if (result.Succeeded)
            {
                roles = await RoleManager.Roles.ToListAsync(); // Refresh roles list
            }
        }
    }

    private sealed class InputModel
    {
        [Required]
        public string RoleName { get; set; } = string.Empty;
    }
}